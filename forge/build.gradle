plugins {
    id 'ml-loader'
    id 'net.minecraftforge.gradle' version '[6.0.25, 6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    implementation("net.xstopho.resourceconfigapi:resourceconfigapi-forge:${resource_config_api}") { transitive = false }
    implementation("net.xstopho.resourcelibrary:resourcelibrary-forge:${resource_library}") { transitive = false }
}

mixin {
    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    reobf = false
    copyIdeResources = true //Calls processResources when in dev

    runs {
        client {
            workingDirectory project.file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Client"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Server"
            args '--nogui'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources'), '--existing', file("../common/src/main/resources/").getAbsolutePath()
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                'FMLCorePluginContainsFMLMod': 'true',
                'MixinConfigs': "${mod_id}.mixins.json"
        ])
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

// Loader Specific Settings
publishMods {
    file = jar.archiveFile
    modLoaders.addAll("forge")
}